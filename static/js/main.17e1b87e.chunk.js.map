{"version":3,"sources":["logo.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","blockNumber","difficulty","gasPrice","latestBlocks","web3","Web3","eth","getBlock","latestBlock","console","log","setState","number","getGasPrice","i","block","push","react_default","a","createElement","className","href","target","rel","role","style","width","scope","map","key","hash","substring","miner","timestamp","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mHAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yUC8IzBC,cAvGb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAO,CACXC,YAAc,EACdC,WAAc,EACdC,SAAW,EACXC,aAAa,IANEX,mNA9BbY,EAAO,IAAIC,IAAK,0EAEID,EAAKE,IAAIC,SAAS,wBAAtCC,SACJC,QAAQC,IAAI,eAAeF,GAC3Bb,KAAKgB,SAAS,CACbX,YAAYQ,EAAYI,OACxBX,WAAWO,EAAYP,sBAEJG,EAAKE,IAAIO,qBAAzBX,SACJO,QAAQC,IAAI,WAAWR,GAGvBP,KAAKgB,SAAS,CACbT,aAKGC,EAAe,GACXW,EAAE,eAAGA,EAAE,sCAEAV,EAAKE,IAAIC,SAASC,EAAYI,OAASE,WAArDC,SACAN,QAAQC,IAAIK,GACZZ,EAAaa,KAAKD,WAJAD,4BAMtBnB,KAAKgB,SAAS,CACVR,aAAaA,yJAiBb,OACEc,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kEACbH,EAAAC,EAAAC,cAAA,KACEC,UAAU,sCACVC,KAAK,yCACLC,OAAO,SACPC,IAAI,uBAJN,eASFN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMK,KAAK,OAAOJ,UAAU,gCAC1BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAA0BK,MAAQ,CAACC,MAAO,UACzDT,EAAAC,EAAAC,cAAA,2CAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACfH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SAAIxB,KAAKI,MAAMC,eAIhBiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACfH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAIxB,KAAKI,MAAME,cAIfgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACfH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SAAIxB,KAAKI,MAAMG,aAS5Be,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,4BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIQ,MAAM,OAAV,KACAV,EAAAC,EAAAC,cAAA,MAAIQ,MAAM,OAAV,QACAV,EAAAC,EAAAC,cAAA,MAAIQ,MAAM,OAAV,SACAV,EAAAC,EAAAC,cAAA,MAAIQ,MAAM,OAAV,eAGJV,EAAAC,EAAAC,cAAA,aACIxB,KAAKI,MAAMI,aAAayB,IAAI,SAACb,EAAOc,GACpC,OACEZ,EAAAC,EAAAC,cAAA,MAAIU,IAAKA,GACPZ,EAAAC,EAAAC,cAAA,MAAIQ,MAAM,OAAOZ,EAAMH,QACvBK,EAAAC,EAAAC,cAAA,UAAKJ,EAAMe,KAAKC,UAAU,EAAE,IAA5B,OACAd,EAAAC,EAAAC,cAAA,UAAKJ,EAAMiB,MAAMD,UAAU,EAAE,IAA7B,OACAd,EAAAC,EAAAC,cAAA,UAAKJ,EAAMkB,gCApH3BC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.17e1b87e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06825633.png\";","import React, { Component } from 'react';\nimport logo from '../logo.png';\nimport './App.css';\nimport Web3 from 'web3'\n\nclass App extends Component {\n  \n async componentWillMount(){\n  // load Web3\n   let web3 = new Web3('https://mainnet.infura.io/v3/69bbddb17be042c28a0d6afe2fdbac64')\n   // Fetch latest block\n   let latestBlock = await web3.eth.getBlock('latest')\n   console.log('latest block',latestBlock)\n   this.setState({\n    blockNumber:latestBlock.number,\n    difficulty:latestBlock.difficulty\n   })\n   let gasPrice= await web3.eth.getGasPrice()\n   console.log('gasPrice',gasPrice)\n  \n   // Fetch gas price\n   this.setState({\n    gasPrice\n   })\n\n   // Fetch laetst 10 blocks\n   let block \n   let latestBlocks = []\n   for(let i=0; i<10; i++)\n   {\n    block = await web3.eth.getBlock(latestBlock.number - i)\n    console.log(block)\n    latestBlocks.push(block)\n   }\nthis.setState({\n    latestBlocks:latestBlocks\n   })\n   }\n\n  constructor(props){\n    super(props);\n    this.state ={\n     blockNumber : 0,\n     difficulty  : 0,\n     gasPrice : 0,\n     latestBlocks:[]\n   }\n }\n \n\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://www.dappuniversity.com/bootcamp\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n             CryptoScan\n          </a>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\" style ={{width: '800px'}} >\n              <h5>Etheruem Blockchain Explorer </h5> \n              \n              <div className=\"row\">\n              <div className=\"col-4\">\n              <div className=\"bg-light pt-4 pd-3 m-1\">\n              <h5> Latest Block </h5>\n              <p>{this.state.blockNumber}</p>\n              </div>\n              </div>\n\n             <div className=\"col-4\"> \n              <div className=\"bg-light pt-4 pd-3 m-1\">\n              <h5> Difficulty </h5>\n              <p>{this.state.difficulty}</p>\n              </div>\n              </div>\n              \n              <div className=\"col-4\">\n              <div className=\"bg-light pt-4 pd-3 m-1\">\n              <h5> Gas Price </h5>\n              <p>{this.state.gasPrice}</p>\n              </div>\n              </div>\n\n           \n\n          </div>\n             \n\n <div className=\"row\">\n                  <div className=\"col-lg-12 mt-3\">\n\n                    <div className=\"card\">\n                      <div className=\"card-header\">\n                        <h5>Latest Blocks</h5>\n                      </div>\n                      <div className=\"card-body\">\n                        <table className=\"table\">\n                          <thead>\n                            <tr>\n                              <th scope=\"col\">#</th>\n                              <th scope=\"col\">Hash</th>\n                              <th scope=\"col\">Miner</th>\n                              <th scope=\"col\">Timestamp</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            { this.state.latestBlocks.map((block, key) => {\n                              return (\n                                <tr key={key} >\n                                  <th scope=\"row\">{block.number}</th>\n                                  <td>{block.hash.substring(0,20)}...</td>\n                                  <td>{block.miner.substring(0,20)}...</td>\n                                  <td>{block.timestamp}</td>\n                                </tr>\n                              )\n                            }) }\n                          </tbody>\n                        </table>\n                      </div>\n                    </div>\n\n                  </div>\n                </div>\n\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}